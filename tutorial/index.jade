.chapter(data-title='Appointment reminders with Twilio and Flask')
  .step(data-file='tasks.py')
    :markdown
      ## What does this thing do?

      This web application shows how you can use Twilio to send your
      customers a text message reminding them of upcoming appointments.

      We use [Flask](http://flask.pocoo.org/) to build out the web application
      that supports our user interface, and
      [Celery](http://www.celeryproject.org/) to send the reminder text messages
      to our customers at the right time.

      In this tutorial, we'll point out the key bits of code that make this
      application work. Check out the project
      [README](https://github.com/TwilioDevEd/appointment-reminders-flask/blob/master/README.md)
      on GitHub to see how to run the code yourself.

      ---

      **See also:**

      * [Twilio Python SMS Quick Start](https://www.twilio.com/docs/quickstart/python/sms)
      * [Twilio Python Helper Library](https://github.com/twilio/twilio-python/)
      * [Twilio REST API docs](https://www.twilio.com/docs/api)
      * [Flask docs](http://flask.pocoo.org/docs/0.10/)
      * [Celery docs](http://docs.celeryproject.org/en/latest/index.html)

  .step(data-file='.env.example', data-highlight='8-11')
    :markdown
      ## Configure the application to use Twilio

      Before we can use the Twilio API to send reminder text messages, we need
      to configure our account credentials. These can be found on your
      [Twilio dashboard](https://www.twilio.com/user/account/voice). You'll also
      need an SMS-enabled phone number - you can find or purchase a new one to
      use [here](https://www.twilio.com/user/account/phone-numbers/incoming).

      We put these environment variables in a `.env` file and use
      [autoenv](https://github.com/kennethreitz/autoenv) to apply them every
      time we work on the project. More information on how to configure this
      application can be found in the project
      [README](https://github.com/TwilioDevEd/appointment-reminders-flask).

      ---

      **See also:**

      * [Autoenv on GitHub](https://github.com/kennethreitz/autoenv)
      * [Your Account SID and Auth Token](https://www.twilio.com/user/account)
      * [Your Available Phone Numbers](https://www.twilio.com/user/account/phone-numbers/incoming)

  .step(data-file='application.py', data-highlight='24-78')
    :markdown
      ## The application structure

      The `Application` object is the heart of any Flask app. Our's initializes
      the app, sets the URLs, and pulls in all our environment variables.

      The `celery` method is boilerplate to configure Celery using settings and 
      context from our Flask application. Our app uses
      [Redis](http://redis.io/) as a data store for Celery.

      To get Celery to run locally on your machine, follow the instructions in
      the [README](https://github.com/TwilioDevEd/appointment-reminders-flask).

      ---

      **See also:**

      * [Flask Configuration Handling](http://flask.pocoo.org/docs/0.10/config/)
      * [Flask Celery integration](http://flask.pocoo.org/docs/0.10/patterns/celery/)
      * [Celery brokers](http://celery.readthedocs.org/en/latest/getting-started/brokers/)

  .step(data-file='models/appointment.py')
    :markdown
      ## The Appointment model

      Our Appointment model is pretty simple. The `name` and `phone_number`
      fields tell us who to send the reminder to. The `time`, `timezone`, and
      `delta` fields tell us when to send the reminder.

      We use [SQLAlchemy](http://www.sqlalchemy.org/) to power our model and
      give us a nice ORM interface to use it with.

      We added an extra method, `get_notification_time`, to help us determine
      the right time to send our reminders. The handy
      [arrow](http://crsmithdev.com/arrow/) library makes this kind of time
      arithmatic easy.

      ---

      **See also:**

      * [SQLAlchemy declarative base](http://docs.sqlalchemy.org/en/rel_1_0/orm/extensions/declarative/basic_use.html)
      * [Arrow replace & shift](http://crsmithdev.com/arrow/#replace-shift)

  .step(data-file='views/appointment.py', data-highlight='20-38')
    :markdown
      ## Scheduling new reminders

      This view handles creating new appointments and scheduling new reminders.
      It accepts POST data sent to the `/appointment` URL.

      We use [WTForms](https://flask-wtf.readthedocs.org/en/latest/index.html)
      to validate the form data using a class called `NewAppointmentForm` that
      we defined in `forms/new_appointment.py`.

      After that we use [arrow](http://crsmithdev.com/arrow/) to convert the
      time zone of the appointment's time to UTC time.

      We then save our new `Appointment` object and schedule the reminder using
      a Celery task we defined called `send_sms_reminder`. We'll look at that
      task next.

      ---

      **See also:**

      * [Flask-WTF Quickstart](https://flask-wtf.readthedocs.org/en/latest/quickstart.html)
      * [Arrow time zone conversion](http://crsmithdev.com/arrow/#convert)
      * [Celery - Calling Tasks](http://celery.readthedocs.org/en/latest/userguide/calling.html)
      * [Celery - ETA Parameter](http://celery.readthedocs.org/en/latest/userguide/calling.html#eta-and-countdown)

  .step(data-file='tasks.py', data-highlight='1-11')
    :markdown
      ## Set up a Twilio API client

      Our `tasks.py` module contains the definition for our `send_sms_reminder`
      task. At the top of this module we use the
      [twilio-python](https://github.com/twilio/twilio-python) library to create
      a new instance of `Client`.

      We'll use this `client` object to send a text message using the Twilio API
      in our `send_sms_reminder` function. Let's look at that now.

      ---

      **See also:**

      * [Using configuration values in Flask](http://flask.pocoo.org/docs/0.10/config/)
      * [Accessing REST resources with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/basics.html)

  .step(data-file='tasks.py', data-highlight='11-32')
    :markdown
      ## Sending a reminder

      This is the `send_sms_reminder` function we called in our
      `appointment.create` view. Our function starts with an `appointment_id` parameter, which we use to
      retrieve an `Appointment` object from the database - a Celery best
      practice.

      To compose the body of our text message, we use
      [arrow](http://crsmithdev.com/arrow/) again to convert the UTC time
      stored in our appointment to the local time zone of our customer.

      After that, sending the message itself is a simple call to
      `client.messages.create()`. We use our customer's phone number as the
      `to` argument and our Twilio number as the `from_` argument.

      ---

      **See also:**

      * [Sending messages with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/messages.html)
      * [Defining Celery tasks](http://celery.readthedocs.org/en/latest/userguide/tasks.html)
      * [Arrow time zone conversion](http://crsmithdev.com/arrow/#convert)

  .step(data-file='tasks.py')
    :markdown
      ## Where to next?

      That's it! Our Flask application is all set to send out reminders for
      upcoming appointments. We hope you found this sample application useful.

      If you're a Python developer working with Twilio, you might enjoy these
      other tutorials:

      [**Click to Call**](https://www.twilio.com/docs/howto/walkthrough/click-to-call/python/flask)

      Put a button on your web page that connects visitors to live support or
      sales people via telephone.

      [**Two-Factor Authentication**](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/python/flask)

      Improve the security of your Flask app's login functionality by adding
      two-factor authentication via text message.

      ### Did this help?
      Thanks for checking this tutorial out! If you have any feedback
      to share with us, we'd love to hear it. [Contact the Twilio Developer
      Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
