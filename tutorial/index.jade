.chapter(data-title='The application structure')
  .step(data-file='application.py', data-title='')
    :markdown
      ## What does the application do?

      The application allows users to schedule appointment reminders
      for customers. The user add a name, a time, a notification time
      and phone number and the application will send the customer a
      reminder using [Twilio's API](https://www.twilio.com/docs/python/install). The application uses
      [Flask](http://flask.pocoo.org/) as the underlying web
      framework and [Celery](http://www.celeryproject.org/) as the task scheduler.

      Head to the app's [readme
      file](https://github.com/TwilioDevEd/appointment-reminders-flask/blob/master/readme.md)
      to learn how to run the application in your own computer.

      ---

      ### Other libraries used in this app
      * [SQLAlchemy ORM](http://www.sqlalchemy.org/)
      * [WTForms form rendering and validation](https://github.com/wtforms/wtforms)
      * [Arrow time library](http://crsmithdev.com/arrow/)
      * [Alembic migrations](https://bitbucket.org/zzzeek/alembic)
      * [pytest to run the tests](http://pytest.org/latest/)

  .step(data-file='application.py', data-highlight='23-69')
    :markdown
      ## The application structure

      The `Application` object configures SQLAlchemy, Flask, Twilio
      credentials and Celery. The properties of this object are then
      used in the rest of the app. The app is configured used
      environment variables. The required variables can be found in `.env.example`

      ## Setting environment variables

      You can either export each of the variables or use autoenv to load them as you cd into the repository.

  .step(data-file='application.py', data-highlight='60-64')
    :markdown
      ## Configuring the application

      ### Configuring Twilio credentials

      To send messages using Twilio's API you will need a Twilio
      Account SID and a Twilio token. You can find all of these in
      your [Twilio dashboard](https://www.twilio.com/user/account/voice). You will
      also need to configure a Twilio sending number that you can
      get/purchase in [the number management
      page](https://www.twilio.com/user/account/phone-numbers/incoming). The
      variables read from the environment will be stored as part of
      Flask's `config` dictionary so we can access them later.

      ## Other configuration

      We also need to configure the database (in this case
      PostgreSQL), a [Celery
      broker](http://celery.readthedocs.org/en/latest/getting-started/brokers/)
      (in this case Redis) and a secret key Flask will use to encrypt
      cookies.

  .step(data-file='views/appointment.py', data-highlight='22-38')
    :markdown
      ## Scheduling appointment reminders

      When a POST request is submitted to `/appointment` the
      corresponding handler will use WTForms to verify that the
      submitted data is valid. If the data is valid we will insert an
      appointment row into the database and schedule a job with Celery
      to send the reminder. If everything goes according to the plan
      the app redirects the user back to the index page. Notice that
      this handler only passes the appointment's ID to the Celery task
      that will send the message.

      ## Other handlers

      There are two more handlers implemented within the application:
      one to delete existing appointments and one to show an index of
      all existing appointments. You can find the source for both of
      these in the same file.

      ---

      ## See also
      [The celery documentation on scheduling
      tasks](http://celery.readthedocs.org/en/latest/userguide/calling.html#eta-and-countdown)

  .step(data-file='tasks.py')
    :markdown
      ## Configuring the application to use Twilio's API

      We have already put all the configuration we need as part of
      Flask's `config` dictionary. Now we just need read from the
      dictionary and initialize Twilio's REST client. We need to pass
      the Twilio Account SID and the Twilio token to the constructor
      as keyword arguments. Alternatively, we could let the object
      read the variables from the environment.

      ## Finding appointment details

      Since the function to send notifications will be executed by
      Celery we need to decorate its definition with Celery's
      generated helpers. This will register the task with Celery. We
      want to include some details in the SMS notification so we will
      query the database for the appointment's details before sending
      the notification.

      If the scheduled task cannot find an appointment with the
      scheduled ID then it simply returns doing nothing. This means
      the appointment has been deleted and therefore we don't need to
      do anything.

  .step(data-file='tasks.py', data-highlight='28-32')
    :markdown
      ## Sending SMS using the API

      All we need to do now is call the methods in the client
      object. We will need to pass a destination phone number, a
      sending phone number and the message we want to send. The
      library will take it from there

      ---

      ### See also

      * [Twilio's documentation on sending messages using
        Python](https://twilio-python.readthedocs.org/en/latest/usage/messages.html)

  .step(data-file='reminders.py')
    :markdown
      ## Exposing Celery's application object

      We already configured Celery to use Redis in the first
      step, but now we need to expose [Celery's application
      object](http://celery.readthedocs.org/en/latest/userguide/application.html)
      so we can register tasks against it. It's also necessary to
      expose this object so we can run a Celery worker.

      ## Running the Celery worker

      Now that we have scheduled tasks we need a worker to run
      them. For this application, running the following command in the
      root of the application should suffice:

      ```
      celery -A reminders.celery worker
      ```
      Here `reminders` is the module containing the already configured
      celery object.